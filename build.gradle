plugins {
//    id 'org.springframework.boot' version '2.5.5'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'java-library'
}

group = 'com.eggplant'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
    querydslVersion = '4.4.0'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

//    classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
}

// querydsl
//apply plugin: "com.ewerk.gradle.plugins.querydsl"
//def querydslSrcDir = 'src/main.generated'
//wrapper
//querydsl {
//    library = "com.querydsl:querydsl-apt"
//    jpa = true
//    querydslSourcesDir = querydslSrcDir
//}
//
//sourceSets {
//    main {
//        java {
//            srcDirs = ['src/main/java', querydslSrcDir]
//        }
//    }
//}
// querydsl 적용
// querydsl 관련 Qclass 생성위치
configure("board") {
    apply plugin: "io.spring.dependency-management"

    dependencies {
        api "com.querydsl:querydsl-jpa"
        api "com.querydsl:querydsl-core"
        annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    }

    // querydsl 적용
    def generated = 'src/main/generated'
    sourceSets {
        main.java.srcDirs += [generated]
    }

    tasks.withType(JavaCompile) {
        options.annotationProcessorGeneratedSourcesDirectory = file(generated)
    }

    clean.doLast {
        file(generated).deleteDir()
    }
}
test {
    useJUnitPlatform()
}
